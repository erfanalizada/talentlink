name: CI/CD

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write # Needed for pushing images to GHCR

jobs:
  # ---------------------------------------------------------
  # Common setup (QEMU + Buildx)
  # ---------------------------------------------------------
  buildx-setup:
    runs-on: ubuntu-latest
    outputs:
      buildx-cache-key: ${{ steps.set-cache-key.outputs.key }}
    steps:
      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - id: set-cache-key
        run: echo "key=$(date +%s)" >> "$GITHUB_OUTPUT"

  # ---------------------------------------------------------
  # USER SERVICE
  # ---------------------------------------------------------
  build-and-deploy-user:
    runs-on: ubuntu-latest
    needs: buildx-setup
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build & push user-service (ARM64)
        run: |
          docker buildx build \
            --platform linux/arm64 \
            -t ghcr.io/${{ github.actor }}/user-service:${{ github.sha }} \
            -t ghcr.io/${{ github.actor }}/user-service:latest \
            ./backend/user-service \
            --push

      - name: Install OCI CLI
        run: pip install --upgrade pip && pip install oci-cli

      - name: Configure OCI CLI
        run: |
          mkdir -p $HOME/.oci
          echo "${{ secrets.OCI_CONFIG }}" | base64 --decode > $HOME/.oci/config
          echo "${{ secrets.OCI_KEY }}" | base64 --decode > $HOME/.oci/oci_api_key.pem
          chmod 600 $HOME/.oci/config
          chmod 600 $HOME/.oci/oci_api_key.pem

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy user-service
        run: |
          kubectl set image deployment/user-service user-service=ghcr.io/${{ github.actor }}/user-service:${{ github.sha }}
          kubectl rollout status deployment/user-service -n default
          kubectl get pods -n default -o wide

  # ---------------------------------------------------------
  # KEYCLOAK DEPLOYMENT
  # ---------------------------------------------------------
  deploy-keycloak:
    runs-on: ubuntu-latest
    needs: buildx-setup
    steps:
      - uses: actions/checkout@v4

      - name: Install OCI CLI
        run: pip install --upgrade pip && pip install oci-cli

      - name: Configure OCI CLI
        run: |
          mkdir -p $HOME/.oci
          echo "${{ secrets.OCI_CONFIG }}" | base64 --decode > $HOME/.oci/config
          echo "${{ secrets.OCI_KEY }}" | base64 --decode > $HOME/.oci/oci_api_key.pem
          chmod 600 $HOME/.oci/config
          chmod 600 $HOME/.oci/oci_api_key.pem

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Create/Update Keycloak admin secret
        run: |
          kubectl create secret generic keycloak-admin \
            --namespace default \
            --from-literal=KEYCLOAK_ADMIN='${{ secrets.KEYCLOAK_ADMIN }}' \
            --from-literal=KEYCLOAK_ADMIN_PASSWORD='${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Keycloak manifests
        run: |
          kubectl apply -f k8s/backend/keycloak/deployment.yaml
          kubectl apply -f k8s/backend/keycloak/service.yaml
          kubectl apply -f k8s/backend/keycloak/ingress-tailscale.yaml
          kubectl apply -f k8s/backend/keycloak/tailscale-allow-policy.yaml
          kubectl apply -f k8s/backend/keycloak/keycloak-tailnet-fix.yaml

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/keycloak -n default
          kubectl get pods -n default -o wide
