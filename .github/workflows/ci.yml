name: CI/CD

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write # Needed for pushing images to GHCR

jobs:
  # ---------------- AUTH SERVICE ----------------
  build-and-deploy-auth:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build & push auth-service
        run: |
          docker build -t ghcr.io/${{ github.actor }}/auth-service:${{ github.sha }} ./backend/auth-service
          docker push ghcr.io/${{ github.actor }}/auth-service:${{ github.sha }}
          docker tag ghcr.io/${{ github.actor }}/auth-service:${{ github.sha }} ghcr.io/${{ github.actor }}/auth-service:latest
          docker push ghcr.io/${{ github.actor }}/auth-service:latest

      - name: Install OCI CLI
        run: pip install --upgrade pip && pip install oci-cli

      - name: Configure OCI CLI
        run: |
          mkdir -p $HOME/.oci
          echo "${{ secrets.OCI_CONFIG }}" | base64 --decode > $HOME/.oci/config
          echo "${{ secrets.OCI_KEY }}" | base64 --decode > $HOME/.oci/oci_api_key.pem
          chmod 600 $HOME/.oci/oci_api_key.pem

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy auth-service
        run: |
          kubectl set image deployment/auth-service auth-service=ghcr.io/${{ github.actor }}/auth-service:${{ github.sha }}
          kubectl rollout status deployment/auth-service
          kubectl get pods -o wide

  # ---------------- USER SERVICE ----------------
  build-and-deploy-user:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
      - name: Build & push user-service
        run: |
          docker build -t ghcr.io/${{ github.actor }}/user-service:${{ github.sha }} ./backend/user-service
          docker push ghcr.io/${{ github.actor }}/user-service:${{ github.sha }}
          docker tag ghcr.io/${{ github.actor }}/user-service:${{ github.sha }} ghcr.io/${{ github.actor }}/user-service:latest
          docker push ghcr.io/${{ github.actor }}/user-service:latest
      - run: pip install --upgrade pip && pip install oci-cli
      - run: |
          mkdir -p $HOME/.oci
          echo "${{ secrets.OCI_CONFIG }}" | base64 --decode > $HOME/.oci/config
          echo "${{ secrets.OCI_KEY }}" | base64 --decode > $HOME/.oci/oci_api_key.pem
          chmod 600 $HOME/.oci/oci_api_key.pem
      - run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      - run: |
          kubectl set image deployment/user-service user-service=ghcr.io/${{ github.actor }}/user-service:${{ github.sha }}
          kubectl rollout status deployment/user-service
          kubectl get pods -o wide

  # ---------------- JOB SERVICE ----------------
  build-and-deploy-job:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
      - name: Build & push job-service
        run: |
          docker build -t ghcr.io/${{ github.actor }}/job-service:${{ github.sha }} ./backend/job-service
          docker push ghcr.io/${{ github.actor }}/job-service:${{ github.sha }}
          docker tag ghcr.io/${{ github.actor }}/job-service:${{ github.sha }} ghcr.io/${{ github.actor }}/job-service:latest
          docker push ghcr.io/${{ github.actor }}/job-service:latest
      - run: pip install --upgrade pip && pip install oci-cli
      - run: |
          mkdir -p $HOME/.oci
          echo "${{ secrets.OCI_CONFIG }}" | base64 --decode > $HOME/.oci/config
          echo "${{ secrets.OCI_KEY }}" | base64 --decode > $HOME/.oci/oci_api_key.pem
          chmod 600 $HOME/.oci/oci_api_key.pem
      - run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      - run: |
          kubectl set image deployment/job-service job-service=ghcr.io/${{ github.actor }}/job-service:${{ github.sha }}
          kubectl rollout status deployment/job-service
          kubectl get pods -o wide

  # ---------------- CV SERVICE ----------------
  build-and-deploy-cv:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
      - name: Build & push cv-service
        run: |
          docker build -t ghcr.io/${{ github.actor }}/cv-service:${{ github.sha }} ./backend/cv-service
          docker push ghcr.io/${{ github.actor }}/cv-service:${{ github.sha }}
          docker tag ghcr.io/${{ github.actor }}/cv-service:${{ github.sha }} ghcr.io/${{ github.actor }}/cv-service:latest
          docker push ghcr.io/${{ github.actor }}/cv-service:latest
      - run: pip install --upgrade pip && pip install oci-cli
      - run: |
          mkdir -p $HOME/.oci
          echo "${{ secrets.OCI_CONFIG }}" | base64 --decode > $HOME/.oci/config
          echo "${{ secrets.OCI_KEY }}" | base64 --decode > $HOME/.oci/oci_api_key.pem
          chmod 600 $HOME/.oci/oci_api_key.pem
      - run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      - run: |
          kubectl set image deployment/cv-service cv-service=ghcr.io/${{ github.actor }}/cv-service:${{ github.sha }}
          kubectl rollout status deployment/cv-service
          kubectl get pods -o wide

  # ---------------- MATCHING SERVICE ----------------
  build-and-deploy-matching:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
      - name: Build & push matching-service
        run: |
          docker build -t ghcr.io/${{ github.actor }}/matching-service:${{ github.sha }} ./backend/matching-service
          docker push ghcr.io/${{ github.actor }}/matching-service:${{ github.sha }}
          docker tag ghcr.io/${{ github.actor }}/matching-service:${{ github.sha }} ghcr.io/${{ github.actor }}/matching-service:latest
          docker push ghcr.io/${{ github.actor }}/matching-service:latest
      - run: pip install --upgrade pip && pip install oci-cli
      - run: |
          mkdir -p $HOME/.oci
          echo "${{ secrets.OCI_CONFIG }}" | base64 --decode > $HOME/.oci/config
          echo "${{ secrets.OCI_KEY }}" | base64 --decode > $HOME/.oci/oci_api_key.pem
          chmod 600 $HOME/.oci/oci_api_key.pem
      - run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      - run: |
          kubectl set image deployment/matching-service matching-service=ghcr.io/${{ github.actor }}/matching-service:${{ github.sha }}
          kubectl rollout status deployment/matching-service
          kubectl get pods -o wide

  # ---------------- NOTIFICATION SERVICE ----------------
  build-and-deploy-notification:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
      - name: Build & push notification-service
        run: |
          docker build -t ghcr.io/${{ github.actor }}/notification-service:${{ github.sha }} ./backend/notification-service
          docker push ghcr.io/${{ github.actor }}/notification-service:${{ github.sha }}
          docker tag ghcr.io/${{ github.actor }}/notification-service:${{ github.sha }} ghcr.io/${{ github.actor }}/notification-service:latest
          docker push ghcr.io/${{ github.actor }}/notification-service:latest
      - run: pip install --upgrade pip && pip install oci-cli
      - run: |
          mkdir -p $HOME/.oci
          echo "${{ secrets.OCI_CONFIG }}" | base64 --decode > $HOME/.oci/config
          echo "${{ secrets.OCI_KEY }}" | base64 --decode > $HOME/.oci/oci_api_key.pem
          chmod 600 $HOME/.oci/oci_api_key.pem
      - run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      - run: |
          kubectl set image deployment/notification-service notification-service=ghcr.io/${{ github.actor }}/notification-service:${{ github.sha }}
          kubectl rollout status deployment/notification-service
          kubectl get pods -o wide

  # ---------------- FRONTEND ----------------
  build-and-deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
      - name: Build & push frontend
        run: |
          docker build -t ghcr.io/${{ github.actor }}/talentlink-frontend:${{ github.sha }} ./frontend
          docker push ghcr.io/${{ github.actor }}/talentlink-frontend:${{ github.sha }}
          docker tag ghcr.io/${{ github.actor }}/talentlink-frontend:${{ github.sha }} ghcr.io/${{ github.actor }}/talentlink-frontend:latest
          docker push ghcr.io/${{ github.actor }}/talentlink-frontend:latest
      - run: pip install --upgrade pip && pip install oci-cli
      - run: |
          mkdir -p $HOME/.oci
          echo "${{ secrets.OCI_CONFIG }}" | base64 --decode > $HOME/.oci/config
          echo "${{ secrets.OCI_KEY }}" | base64 --decode > $HOME/.oci/oci_api_key.pem
          chmod 600 $HOME/.oci/oci_api_key.pem
      - run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      - run: |
          kubectl set image deployment/frontend frontend=ghcr.io/${{ github.actor }}/talentlink-frontend:${{ github.sha }}
          kubectl rollout status deployment/frontend
          kubectl get pods -o wide

  # ---------------- KEYCLOAK ----------------
  deploy-keycloak:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install OCI CLI
        run: pip install --upgrade pip && pip install oci-cli

      - name: Configure OCI CLI
        run: |
          mkdir -p $HOME/.oci
          echo "${{ secrets.OCI_CONFIG }}" | base64 --decode > $HOME/.oci/config
          echo "${{ secrets.OCI_KEY }}" | base64 --decode > $HOME/.oci/oci_api_key.pem
          chmod 600 $HOME/.oci/oci_api_key.pem

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Create/Update Keycloak admin secret
        run: |
          kubectl create secret generic keycloak-admin \
            --namespace default \
            --from-literal=KEYCLOAK_ADMIN='${{ secrets.KEYCLOAK_ADMIN }}' \
            --from-literal=KEYCLOAK_ADMIN_PASSWORD='${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Keycloak manifests
        run: |
          kubectl apply -f k8s/backend/keycloak/deployment.yaml
          kubectl apply -f k8s/backend/keycloak/service.yaml
          kubectl apply -f k8s/backend/keycloak/ingress.yaml

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/keycloak -n default
          kubectl get pods -n default -o wide
