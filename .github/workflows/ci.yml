name: CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Log in to GHCR (make sure GHCR_USERNAME + GHCR_TOKEN are in repo secrets)
      - name: Log in to GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

      - name: Build & push backend
        run: |
          docker build -t ghcr.io/${{ secrets.GHCR_USERNAME }}/talentlink-backend:latest \
                       -t ghcr.io/${{ secrets.GHCR_USERNAME }}/talentlink-backend:${{ github.sha }} ./backend
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/talentlink-backend:latest
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/talentlink-backend:${{ github.sha }}

      - name: Build & push frontend
        run: |
          docker build -t ghcr.io/${{ secrets.GHCR_USERNAME }}/talentlink-frontend:latest \
                       -t ghcr.io/${{ secrets.GHCR_USERNAME }}/talentlink-frontend:${{ github.sha }} ./frontend
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/talentlink-frontend:latest
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/talentlink-frontend:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Install OCI CLI so kubeconfig exec works
      - name: Install OCI CLI
        run: |
          pip install --upgrade pip
          pip install oci-cli
          oci --version

      # Configure OCI credentials
      - name: Configure OCI CLI
        run: |
          mkdir -p $HOME/.oci
          echo "${{ secrets.OCI_CONFIG }}" | base64 --decode > $HOME/.oci/config
          echo "${{ secrets.OCI_KEY }}" | base64 --decode > $HOME/.oci/oci_api_key.pem
          chmod 600 $HOME/.oci/oci_api_key.pem

      # Configure kubeconfig for kubectl
      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      # Apply manifests
      - name: Deploy manifests
        run: kubectl apply -f k8s/

      # Force restart deployments so new images are pulled
      - name: Restart backend deployment
        run: kubectl rollout restart deployment backend --namespace=default

      - name: Restart frontend deployment
        run: kubectl rollout restart deployment frontend --namespace=default

      # Debug: Show pods status after deployment
      - name: Get pods after deploy
        run: kubectl get pods -n default -o wide
