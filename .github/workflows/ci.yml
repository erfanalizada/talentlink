name: CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Install Flutter SDK (with Dart >= 3.9.x support)
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.3'
          channel: 'stable'

      # Build Flutter web (from correct folder)
      - name: Build Flutter web
        working-directory: frontend/talentlink_frontend
        run: |
          flutter pub get
          flutter build web --release

      # Log in to GHCR
      - name: Log in to GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

      # Build & push backend image
      - name: Build & push backend
        run: |
          docker build -t ghcr.io/${{ secrets.GHCR_USERNAME }}/talentlink-backend:latest ./backend
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/talentlink-backend:latest

      # Build & push frontend image
      # Make sure your Dockerfile copies talentlink_frontend/build/web into nginx/html
      - name: Build & push frontend
        run: |
          docker build -t ghcr.io/${{ secrets.GHCR_USERNAME }}/talentlink-frontend:latest ./frontend
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/talentlink-frontend:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Install OCI CLI
      - name: Install OCI CLI
        run: |
          pip install --upgrade pip
          pip install oci-cli
          oci --version

      # Configure OCI credentials
      - name: Configure OCI CLI
        run: |
          mkdir -p $HOME/.oci
          echo "${{ secrets.OCI_CONFIG }}" | base64 --decode > $HOME/.oci/config
          echo "${{ secrets.OCI_KEY }}" | base64 --decode > $HOME/.oci/oci_api_key.pem
          chmod 600 $HOME/.oci/oci_api_key.pem

      # Configure kubeconfig
      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      # Apply Kubernetes manifests
      - name: Deploy manifests
        run: kubectl apply -f k8s/

      # Restart deployments so new images are picked up
      - name: Restart backend deployment
        run: kubectl rollout restart deployment backend --namespace=default

      - name: Restart frontend deployment
        run: kubectl rollout restart deployment frontend --namespace=default

      # Debugging: show pods after deploy
      - name: Get pods after deploy
        run: kubectl get pods -n default -o wide










#What this does

#Every time you push to main or make a pull request → GitHub will:

#Checkout your code.

#Try to build backend/Dockerfile.

#Try to build frontend/Dockerfile.

#If both builds succeed → CI passes (green checkmark).

#If one fails → CI fails (red).

# What this does:

#Logs in to GHCR using your secrets (GHCR_USERNAME and GHCR_TOKEN).

#Builds your backend and frontend images.

#Pushes them to ghcr.io/erfanalizada/backend:latest and ghcr.io/erfanalizada/frontend:latest.

# After pushing, you can confirm in GitHub under Packages of your repo.